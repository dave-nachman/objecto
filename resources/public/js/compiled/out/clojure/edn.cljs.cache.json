["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.edn","~:imports",null,"~:requires",["^ ","~$reader","~$cljs.reader","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$read",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/giraffe/code/objecto/resources/public/js/compiled/out/clojure/edn.cljs","~:line",20,"~:column",7,"~:end-line",20,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^I",[["^;"],["~$opts","^;"],["^;","~$eof-error?","~$eof","^K"]]]]],"~:doc","Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",4,"~:max-fixed-arity",4,"~:method-params",["^I",[["^;"],["^K","^;"],["^;","^L","^M","^K"]]],"^H",["^I",[["^;"],["^K","^;"],["^;","^L","^M","^K"]]],"~:arglists-meta",["^I",[null,null,null]]]],"^7","~$clojure.edn/read","^C","resources/public/js/compiled/out/clojure/edn.cljs","^G",11,"^O",["^ ","^P",false,"^Q",4,"^R",4,"^S",["^I",[["^;"],["^K","^;"],["^;","^L","^M","^K"]]],"^H",["^I",[["^;"],["^K","^;"],["^;","^L","^M","^K"]]],"^T",["^I",[null,null,null]]],"^S",["^I",[["^;"],["^K","^;"],["^;","^L","^M","^K"]]],"~:protocol-impl",null,"^Q",4,"^T",["^I",[null,null,null]],"^E",1,"^P",false,"~:methods",[["^ ","^Q",1,"^P",false,"~:tag","~$any"],["^ ","^Q",2,"^P",false,"^X","^Y"],["^ ","^Q",4,"^P",false,"^X","^Y"]],"^D",20,"^F",20,"^R",4,"~:fn-var",true,"^H",["^I",[["^;"],["^K","^;"],["^;","^L","^M","^K"]]],"^N","Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value."],"~$read-string",["^ ","^A",null,"^B",["^ ","^C","/Users/giraffe/code/objecto/resources/public/js/compiled/out/clojure/edn.cljs","^D",44,"^E",7,"^F",44,"^G",18,"^H",["^I",["^J",["^I",[["~$s"],["^K","~$s"]]]]],"^N","Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read","^O",["^ ","^P",false,"^Q",2,"^R",2,"^S",["^I",[["~$s"],["^K","~$s"]]],"^H",["^I",[["~$s"],["^K","~$s"]]],"^T",["^I",[null,null]]]],"^7","~$clojure.edn/read-string","^C","resources/public/js/compiled/out/clojure/edn.cljs","^G",18,"^O",["^ ","^P",false,"^Q",2,"^R",2,"^S",["^I",[["~$s"],["^K","~$s"]]],"^H",["^I",[["~$s"],["^K","~$s"]]],"^T",["^I",[null,null]]],"^S",["^I",[["~$s"],["^K","~$s"]]],"^V",null,"^Q",2,"^T",["^I",[null,null]],"^E",1,"^P",false,"^W",[["^ ","^Q",1,"^P",false,"^X",["^6",["^Y","~$clj-nil"]]],["^ ","^Q",2,"^P",false,"^X",["^6",["^Y","^11"]]]],"^D",44,"^F",44,"^R",2,"^Z",true,"^H",["^I",[["~$s"],["^K","~$s"]]],"^N","Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^;","^<","^<","^<"],"^N","edn reading.\n\n  This namespace provides alias for cljs.reader/read and cljs.reader/read-string.\n  Thus Clojure and ClojureScript source can reference these functions in the same way.\n  In Clojure, read and read-string may cause evaluation,\n  but clojure.edn/read and clojure.edn/read-string will not.\n  In ClojureScript cljs.reader/read and cljs.reader/read-string will not cause evaluation,\n  they only read edn."]